-- DATA ANALYSIS & BUSINESS KEY PROBLEMS AND ANSWERS


-- Q1.What is the total number of orders and how does this vary by month or season?

-- Total Orders placed
Select count(order_id) as total_orders
from olist_orders
where order_status not in ('canceled', 'unavailable')

-- How does this vary by months
Select extract(year from order_purchase_timestamp) as year,
extract(month from order_purchase_timestamp) as month,
count(order_id) as total_orders
from olist_orders
where order_status not in ('canceled', 'unavailable')
group by 1,2
order by 1,2


-- Q2.What is the total revenue generated by olist and how has it changed overtime?

-- Total Revenue
SELECT SUM(freight_value + price) AS total_revenue
FROM olist_order_items o
join olist_orders oo on o.order_id = oo.order_id
where oo.order_status not in ('canceled', 'unavailable')

-- Revenue by quater
Select extract(year from order_purchase_timestamp) as year,
extract(quarter from order_purchase_timestamp) as quarter,
sum(price + freight_value) as total_revenue
from olist_orders o
join olist_order_items oi on o.order_id = oi.order_id
where order_status not in ('canceled', 'unavailable') and extract(year from order_purchase_timestamp) != 2016 -- 2016 data is very less and inconsistent
group by 1,2
order by 1,2


-- Revenue by month
Select extract(year from order_purchase_timestamp) as year,
extract(month from order_purchase_timestamp) as quarter,
count(price + freight_value) as total_revenue
from olist_orders o
join olist_order_items oi on o.order_id = oi.order_id
where order_status not in ('canceled', 'unavailable')
group by 1,2
order by 1,2


-- Q3.What are the top 10 product categories by total sales?

WITH top10_category as (
select product_category,
sum(freight_value + price) as total_revenue,
rank()over(order by sum(oi.price + oi.freight_value)desc) as rnk
from olist_order_items oi
join olist_dim_products p on oi.product_id = p.product_id
join olist_orders o on o.order_id = oi.order_id
where o.order_status not in ('canceled', 'unavailable')
group by 1)

Select product_category,
total_revenue,
rnk
from top10_category
where rnk <= 10


-- Q4.Who are the top 5 sellers by total sales revenue

select s.seller_id,
sum(price + freight_value) as total_sales_revenue
from olist_sellers s
join olist_order_items oi on s.seller_id = oi.seller_id
group by 1
order by 2 desc
limit 5


-- Q5.What is the average order value (AOV) per order?

WITH order_total AS (
    SELECT o.order_id,
           sum(freight_value + price) AS revenue
    FROM olist_order_items oi
	join olist_orders o on o.order_id = oi.order_id
	where o.order_status not in ('canceled', 'unavailable')
	group by 1)
	
SELECT AVG(revenue) as average_order_value
FROM order_total


-- Q6.What is the average shipping cost per order?

select
avg(freight_value) as avg_freight_value
from 
(select order_id,
sum(freight_value) as freight_value
from olist_order_items
group by 1)


-- Q7.What is the average delivery days per order?

select
avg(delivery_diff_days) as avg_delivery_days
from 
(select order_id,
delivery_diff_days
from olist_orders
group by 1)


-- Q8.Who are the top 10 customers by total spending?

SELECT customer_unique_id,
sum(payment_value) as total_spending
from olist_customers c 
join olist_orders o on c.customer_id = o.customer_id
join olist_order_payments p on p.order_id = o.order_id
group by 1
order by 2 desc


--  Q9.How many orders were placed per seller city and state?

-- total orders by seller city
SELECT seller_city,
count(distinct order_id) total_orders
from olist_sellers s 
join olist_order_items oi on s.seller_id = oi.seller_id
group by 1
order by 2 desc

-- total orders by seller state
SELECT seller_state,
count(distinct order_id) total_orders
from olist_sellers s 
join olist_order_items oi on s.seller_id = oi.seller_id
group by 1
order by 2 desc


-- Q.10 What is the average order value per product category?

select product_category_name,
avg(revenue) as average_order_value
from (
select order_id,
product_category_name,
sum(freight_value + price) revenue
from olist_order_items oi
join olist_products p on oi.product_id = p.product_id
group by 1,2
)
group by 1
order by 2 desc


-- Q10.How do order counts and revenues vary by day of the week?

SELECT day_name,
count(oi.order_id) as total_order_counts,
sum(freight_value + price) as total_revenue,
from olist_order_items oi
join olist_orders o on oi.order_id = o.order_id
join dim_calendar d on d.date_key = o.order_purchase_timestamp::date
where order_status not in ('canceled', 'unavailable')
group by 1


-- Q11.What is the percentage of customers with repeat orders?

WITH customer_order_count as (
select customer_unique_id,
count(order_id) total_orders
from olist_customers c
join olist_orders  p on p.customer_id = c.customer_id
group by 1)

select
round(count(customer_unique_id)::numeric/(select count(customer_unique_id) from customer_order_count)::numeric * 100,2)
from customer_order_count
where total_orders > 1


-- Q12.What is the average number of payment installments per order?

With order_installments AS (
SELECT 
order_id,
SUM(payment_installments) AS total_installments
FROM olist_order_payments
GROUP BY order_id
)
SELECT 
ROUND(AVG(total_installments), 2) AS avg_installments_per_order
FROM order_installments;


-- Q13.What percentage of total revenue does each product category contribute?
select product_category,
round(sum(price)/(select sum(price) from olist_order_items) * 100,2) revenue_percentage
from olist_dim_products p
join olist_order_items oi on oi.product_id =  p.product_id
group by 1
order by 2 desc


-- Q14.What is the average shipping cost per product category and order?
select product_category_name,
avg(revenue) as average_order_value
from (
select order_id,
product_category_name,
sum(freight_value) revenue
from olist_order_items oi
join olist_products p on oi.product_id = p.product_id
group by 1,2
)
group by 1
order by 2 desc


-- Q15.What is the order volume and revenue per hour of the day?

select extract(hour from order_purchase_timestamp),
count(o.order_id),
sum(price) as revenue
from olist_orders o 
join olist_order_items oi on o.order_id = oi.order_id
group by 1
order by 1

olist_geolocation
olist_sellers


-- Q16.What is the average review score by product category ?

select product_category,
round(avg(review_score),2) average_review_score
from olist_order_reviews r
join olist_order_items oi on oi.order_id = r.order_id
join olist_dim_products p on p.product_id = oi.product_id
group by 1


-- Q17.What is the trend in average review scores over time?
Select extract(year from order_purchase_timestamp) as year,
extract(quarter from order_purchase_timestamp) as quarter,
round(avg(review_score),2) as avg_review_score
from olist_orders o
join olist_order_reviews r on r.order_id = o.order_id
where extract(year from order_purchase_timestamp) != 2016 and to_char(order_purchase_timestamp, 'YYYY-MM') != '2018-10' -- (2016 has very less and inconsistent data and 0ct-2018 has incomplete data)
group by 1,2


--  Q18.What is the average order cancellation rate on Olist.

select count(o.order_id)::float/(select count(*) from olist_orders )::float * 100,
count(o.order_id) as total_cancelled_orders,
sum(freight_value + price) as lost_revenue,
count(distinct seller_id) as total_sellers
from olist_orders o
join olist_order_items oi on o.order_id = oi.order_id
where order_status in ('canceled', 'unavailable')


-- Q19.How do customer reviews and ratings affect sales and product performance on Olist? 

Select case when r.review_score = 5 then '5 Stars'
            when r.review_score = 4 then '4 Stars'
			when r.review_score = 3 then '3 Stars'
			when r.review_score = 2 then '2 Stars'
			when r.review_score = 1 then '1 Stars'
			end as rating,
			count(r.review_id) as total_reviews,
			sum(price + freight_value) as total_revenue
		from olist_order_reviews r 
		join olist_order_items oi on r.order_id = oi.order_id
		join olist_orders o on o.order_id = oi.order_id
		where order_status not in ('canceled', 'unavailable')
		group by 1
		order by 3 desc



-- ADVANCE BUSINESS QUESTIONS AND ANALYSIS

-- Q1.What is the average time between successive orders for repeat customers?
WITH ranked_orders AS (
    SELECT 
        customer_unique_id,
        order_purchase_timestamp,
        ROW_NUMBER() OVER (PARTITION BY customer_unique_id ORDER BY order_purchase_timestamp) AS rn
    FROM olist_orders o
	join olist_customers c on c.customer_id = o.customer_id
),
order_pairs AS (
    SELECT 
        curr.customer_unique_id,
        curr.order_purchase_timestamp AS current_order,
        prev.order_purchase_timestamp AS previous_order,
        EXTRACT(EPOCH FROM (curr.order_purchase_timestamp - prev.order_purchase_timestamp)) / 86400 AS gap_days
    FROM ranked_orders curr
    JOIN ranked_orders prev 
      ON curr.customer_unique_id = prev.customer_unique_id AND curr.rn = prev.rn + 1
)
SELECT 
    ROUND(AVG(gap_days), 2) AS avg_days_between_orders
FROM order_pairs
WHERE gap_days <= 180 -- removing outliers as generally in e-commerce a return after more than 6 months isnt considered repeat purchase



-- Q2.How many sellers are active on Olist, and how does this number change over time?
-- Number of active sellers by year
-- Overall count of seller additions or drops

SELECT
EXTRACT(YEAR FROM order_purchase_timestamp)::INT AS active_year,
EXTRACT(QUARTER FROM order_purchase_timestamp)::INT AS active_quarter,
COUNT(DISTINCT seller_id) AS active_sellers,
COALESCE(
    COUNT(DISTINCT seller_id) - LAG(COUNT(DISTINCT seller_id)) OVER (
      PARTITION BY EXTRACT(YEAR FROM order_purchase_timestamp)
      ORDER BY EXTRACT(QUARTER FROM order_purchase_timestamp)
    ),
    0
  ) AS num_of_seller_added_or_dropped,
  CASE
    WHEN (COUNT(DISTINCT seller_id) - LAG(COUNT(DISTINCT seller_id)) OVER (
      PARTITION BY EXTRACT(YEAR FROM order_purchase_timestamp)
      ORDER BY EXTRACT(QUARTER FROM order_purchase_timestamp)
    )) > 0 THEN 'Addition'
    WHEN (COUNT(DISTINCT seller_id) - LAG(COUNT(DISTINCT seller_id)) OVER (
      PARTITION BY EXTRACT(YEAR FROM order_purchase_timestamp)
      ORDER BY EXTRACT(QUARTER FROM order_purchase_timestamp)
    )) < 0 THEN 'Dropped'
    ELSE 'No Change'
  END AS change_indication
FROM olist_orders ood
JOIN olist_order_items ooid ON ood.order_id = ooid.order_id
where extract(year from order_purchase_timestamp) != 2016 and to_char(order_purchase_timestamp, 'YYYY-MM') != '2018-10' -- (2016 has very less and inconsistent data and 0ct-2018 has incomplete data)
GROUP BY EXTRACT(YEAR FROM order_purchase_timestamp), EXTRACT(QUARTER FROM order_purchase_timestamp)
ORDER BY active_year, active_quarter;


-- Q3.MOM Growth Rate%
with monthly_revenue as (
select to_char(order_purchase_timestamp, 'YYYY-MM') AS year_month,
sum(price + freight_value) as current_revenue
from olist_orders o
join olist_order_items oi on o.order_id = oi.order_id
where order_status not in ('canceled', 'unavailable')
group by 1
ORDER BY 1
)

select year_month,
current_revenue,
lag(current_revenue) over(order by year_month) as previous_revenue,
ROUND((current_revenue - lag(current_revenue) over(order by year_month))/lag(current_revenue) over(order by year_month),2) * 100 as mom_growth 
from monthly_revenue
where year_month not in ('2016-09','2016-10','2016-12','2018-09')


-- Q4.Top 10 Route Summary by orders and revenue
SELECT 
    seller.seller_state AS origin_state,
    customer.customer_state AS destination_state,
    COUNT(DISTINCT order_item.order_id) AS total_orders,
    SUM(order_item.price + order_item.freight_value) AS total_revenue
FROM 
    olist_order_items AS order_item
JOIN 
    olist_sellers AS seller ON order_item.seller_id = seller.seller_id
JOIN 
    olist_orders AS orders ON order_item.order_id = orders.order_id
JOIN 
    olist_customers AS customer ON orders.customer_id = customer.customer_id
GROUP BY 
    seller.seller_state, customer.customer_state
ORDER BY 
    total_orders DESC
LIMIT 10;




